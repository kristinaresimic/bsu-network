{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useState } from \"react\";\nexport var RequirementsItem = function RequirementsItem(props) {\n  var heading = props.heading,\n      paragraph = props.paragraph,\n      processor = props.processor,\n      ram = props.ram,\n      storage = props.storage,\n      network = props.network,\n      server = props.server,\n      system = props.system,\n      radioName = props.radioName;\n\n  var _useState = useState(1),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  return __jsx(\"div\", {\n    className: \"\"\n  }, __jsx(\"p\", {\n    className: \"h5 fw-700\"\n  }, heading), __jsx(\"p\", {\n    className: \"col-12 col-lg-9 col-md-12 col-xl-10 p1 fw-500 ml-3 pl-1\"\n  }, paragraph), __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"requirements-item \"\n  }, __jsx(\"ul\", {\n    className: \"requirements-item-top p-0 m-0\"\n  }, __jsx(\"li\", {\n    className: \"p1 fw-500\"\n  }, processor), __jsx(\"li\", {\n    className: \"p1 fw-500\"\n  }, ram), __jsx(\"li\", {\n    className: \"p1 fw-500\"\n  }, storage), __jsx(\"li\", {\n    className: \"p1 fw-500\"\n  }, network), __jsx(\"li\", {\n    className: \"p1 fw-500\"\n  }, server), __jsx(\"li\", {\n    className: \"p1 fw-500\"\n  }, system))), __jsx(\"div\", {\n    className: \"requirements-part m-0 p-0 mt-5  \"\n  }, __jsx(\"label\", {\n    className: \"sq-radio d-flex align-items-center fw-500 p1\",\n    htmlFor: \"first-\".concat(radioName)\n  }, \"I can meet the selected requirements.\", __jsx(\"input\", {\n    type: \"radio\",\n    id: \"first-\".concat(radioName),\n    checked: checked === 1,\n    onChange: function onChange() {\n      return setChecked(1);\n    },\n    name: radioName\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  })), __jsx(\"label\", {\n    className: \"sq-radio d-flex align-items-center fw-500 p1\",\n    htmlFor: \"second-\".concat(radioName)\n  }, \"I would like Inery to set up the selected hardware requirements for me.\", __jsx(\"input\", {\n    type: \"radio\",\n    id: \"second-\".concat(radioName),\n    checked: checked === 2,\n    onChange: function onChange() {\n      return setChecked(2);\n    },\n    name: radioName\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  })))));\n};","map":null,"metadata":{},"sourceType":"module"}