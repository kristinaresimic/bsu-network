{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { memo, useState } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  const {\n    0: position,\n    1: setPosition\n  } = useState({\n    coordinates: [0, 0],\n    zoom: 1\n  });\n\n  const handleZoomIn = () => {\n    if (position.zoom >= 4) return;\n    setPosition(pos => _objectSpread(_objectSpread({}, pos), {}, {\n      zoom: pos.zoom * 2\n    }));\n  };\n\n  const handleZoomOut = () => {\n    if (position.zoom <= 1) return;\n    setPosition(pos => _objectSpread(_objectSpread({}, pos), {}, {\n      zoom: pos.zoom / 2\n    }));\n  };\n\n  const handleMoveEnd = position => {\n    setPosition(position);\n  };\n\n  const handleMoveStart = () => {\n    setPosition(pos => ({\n      coordinates: [0, 0],\n      zoom: 2\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 150\n    },\n    width: 800,\n    height: 400\n  }, __jsx(ZoomableGroup, {\n    disableZooming: true,\n    zoom: position.zoom,\n    center: position.coordinates,\n    onMoveEnd: handleMoveEnd // onMoveStart={handleMoveStart}\n\n  }, __jsx(Geographies, {\n    geography: geoUrl,\n    style: {\n      position: \"relative\"\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => __jsx(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    onMouseEnter: () => {\n      const {\n        NAME,\n        POP_EST\n      } = geo.properties;\n      setTooltipContent(`${NAME} â€” ${rounded(POP_EST)}`);\n    },\n    onMouseLeave: () => {\n      setTooltipContent(\"\");\n    },\n    style: {\n      default: {\n        fill: \"#0071bb\",\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#3c5dae\",\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#fff\",\n        outline: \"none\"\n      }\n    }\n  }))))), __jsx(\"div\", {\n    className: \"controls\"\n  }, __jsx(\"button\", {\n    onClick: handleZoomIn\n  }, __jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"#fff\",\n    strokeWidth: \"3\"\n  }, __jsx(\"line\", {\n    x1: \"12\",\n    y1: \"5\",\n    x2: \"12\",\n    y2: \"19\"\n  }), __jsx(\"line\", {\n    x1: \"5\",\n    y1: \"12\",\n    x2: \"19\",\n    y2: \"12\"\n  }))), __jsx(\"button\", {\n    onClick: handleZoomOut\n  }, __jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"#fff\",\n    strokeWidth: \"3\"\n  }, __jsx(\"line\", {\n    x1: \"5\",\n    y1: \"12\",\n    x2: \"19\",\n    y2: \"12\"\n  })))));\n};\n\nexport default /*#__PURE__*/memo(MapChart);","map":null,"metadata":{},"sourceType":"module"}